{"componentChunkName":"component---src-templates-blog-post-js","path":"/dns-server/","result":{"data":{"site":{"siteMetadata":{"title":"아자아자 나현이 화이팅"}},"markdownRemark":{"id":"b61e5437-864c-5cf4-8602-4f49da0dfc08","excerpt":"운영체제의 네트워크 API는 도메인이 아닌 IP 주소를 사용하여 통신하기 때문에, 도메인 주소를 IP 주소로 변환하는 과정이 필요하다.\n이 과정에서 DNS 서버가 사용된다. DNS 서버에 조회 메세지를 보내고 응답을 받는 클라이언트를 \"DNS 리졸버\"라고 한다.  DNS…","html":"<p>운영체제의 네트워크 API는 도메인이 아닌 IP 주소를 사용하여 통신하기 때문에, 도메인 주소를 IP 주소로 변환하는 과정이 필요하다.<br/>\n이 과정에서 <strong>DNS 서버</strong>가 사용된다.<br/></p>\n<p>DNS 서버에 조회 메세지를 보내고 응답을 받는 클라이언트를 \"<strong>DNS 리졸버</strong>\"라고 한다. <br/></p>\n<ol>\n<li>DNS 리졸버는 사용자가 입력한 도메인을 기반으로 <strong>DNS 쿼리</strong>를 만든다.</li>\n<li>DNS 쿼리를 전송하기 위해 <strong>네트워크 스택</strong>을 호출한다.</li>\n<li>네트워크 스택이 DNS 쿼리를 DNS 서버에 <strong>전송</strong>하고 <strong>응답</strong>을 받는다.</li>\n</ol>\n<p>위 과정이 DNS 서버의 통신 과정을 간략하게 설명한 것이다.</p>\n<p>그렇다면 <strong>DNS 쿼리</strong>에는 무슨 내용이 들어갈까?</p>\n<ul>\n<li><strong>이름</strong> : 도메인의 이름</li>\n<li><strong>레코드 타입</strong> : 요청하는 정보의 유형\n<ul>\n<li>A 타입(IP 주소)</li>\n<li>MX 타입(메일 서버)</li>\n<li>etc</li>\n</ul>\n</li>\n<li><strong>클래스</strong>: IN 클래스(인터넷)\n<ul>\n<li>인터넷 이외의 네트워크는 거의 소멸되었기 때문에 항상 IN을 쓴다고 생각해도 좋다.</li>\n</ul>\n</li>\n</ul>\n<p>DNS 쿼리를 받은 DNS 서버는 일치하는 정보를 찾고 해당하는 <strong>리소스 레코드</strong>를 응답한다.</p>\n<ul>\n<li>리소스 레코드 : 도메인 정보를 담고있는 주소록의 개념</li>\n</ul>\n<blockquote>\n<p><strong>MX 타입</strong> <br/>\nMX 타입(메일 서버 타입)은 도메인과 우선 순위가 함께 저장이 되어있다.<br/>\n(숫자가 낮을 수록 우선 순위가 높다.)<br/>\nDNS 쿼리를 받으면 MX 리소스 레코드의 <strong>목록</strong>을 보낸다. <br/>\nDNS 리졸버는 우선순위가 높은 메일 서버 선택 후 추가 DNS 쿼리를 보내게 된다.</p>\n</blockquote>\n<p>하지만 현실의 인터넷에서는 막대한 수의 서버가 존재한다.<br/>\n1대의 DNS 서버에 모든 도메인을 등록하는 것은 역시 불가능하다.<br/>\n이를 분산시켜서 다수의 DNS 서버에 등록하고 서로 연대하여 정보를 찾는다.<br/></p>\n<p>그전에 도메인에 대해 간단히 이해해보자.</p>\n<h4>도메인</h4>\n<p>인터넷에서 네트워크 서비스를 식별하고 접근하기 위해 사용하는 고유의 이름.<br/>\n<strong>점(.)으로 구분된 계층구조를 가진다.</strong><br/>\n예를 들어, <strong><a href=\"http://www.example.com\">www.example.com</a></strong> 는 아래와 같은 계층구조로 구분할 수 있다.<br/>\n<strong>www</strong> - 하위 도메인, <strong>example</strong> - 2차 도메인(SLD), <strong>com</strong> - 최상위 도메인(TLD)</p>\n<p>DNS 서버는 수만대나 있기 때문에 모든 서버를 다 찾는 건 현실적으로 불가능하다.<br/>\n이 때 도메인의 계층 구조를 활용할 수 있다.</p>\n<p>하위 도메인을 담당하는 DNS 서버의 IP 주소를 상위 DNS 서버에 등록하는 것이다.<br/>\n그리고 <code class=\"language-text\">kr</code>, <code class=\"language-text\">com</code>과 같은 최상위 도메인 위에 <strong>루트 도메인</strong>을 두고, <br/>\n마지막으로 <strong>루트 도메인의 DNS 서버를 인터넷이 존재하는 DNS 서버에 전부 등록을 하면 된다</strong>.</p>\n<p>이로써 루트 도메인에서부터 차례로 아래쪽으로 거슬러 내려가며 원하는 DNS 서버를 찾을 수 있게 되었다!</p>\n<p>그러면 <code class=\"language-text\">www.example.com</code>의 IP 주소를 묻는 과정에 대해 예시를 들어보자.</p>\n<ol>\n<li>클라이언트가 가까운 DNS 서버(로컬 DNS 서버)에 <code class=\"language-text\">www.example.com</code>의 IP 주소를 묻는다.</li>\n<li>로컬 DNS 서버는 루트 DNS 서버에게 \".\"(루트) 도메인에 대한 쿼리를 보냅니다.</li>\n<li>루트 DNS 서버는 최상위 도메인(.com)의 DNS 서버 주소를 반환한다.</li>\n<li>로컬 DNS 서버는 \".com\" 도메인의 DNS 서버에게 <code class=\"language-text\">www.example.com</code>의 IP 주소를 묻는다.</li>\n<li>\".com\" 도메인의 DNS 서버는 \"example.com\" 도메인의 DNS 서버 주소를 반환한다.</li>\n<li>로컬 DNS 서버는 \"example.com\" 도메인의 DNS 서버에게 <code class=\"language-text\">www.example.com</code>의 IP 주소를 묻는다.</li>\n<li>\"example.com\" 도메인의 DNS 서버는 <code class=\"language-text\">www.example.com</code>의 IP 주소를 반환한다.</li>\n<li>로컬 DNS 서버는 클라이언트에게 <code class=\"language-text\">www.example.com</code>의 IP 주소를 전달한다.</li>\n</ol>\n<p>사실 DNS 서버는 <strong>캐시</strong>를 사용하기 때문에 실제 동작은 위의 예시와 차이가 있을 수 있다.<br/>\n<strong>DNS 서버는 한 번 조사한 이름을 캐시에 기록하고, 조회한 이름에 해당하는 정보가 캐시에 있으면 그 위치부터 찾기 시작한다.</strong> <br/>\n하지만, 캐시에 저장된 후 정보가 변경되는 일도 있으므로 일정기간이 지나면 삭제한다.<br/>\n또한 클라이언트에게 IP 주소를 전달할 때 캐시에서 가져온 정보인지 DNS 서버에서 가져온 정보인지 알려준다.</p>","frontmatter":{"title":"DNS(Domain Name System)","date":"July 07, 2024","description":"도메인 주소를 IP 주소로 변환한다."}},"previous":{"fields":{"slug":"/ip-address/"},"frontmatter":{"title":"IP 주소"}},"next":null},"pageContext":{"id":"b61e5437-864c-5cf4-8602-4f49da0dfc08","previousPostId":"7e9a8d0b-2a66-5cac-bbcd-720099f4878b","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}