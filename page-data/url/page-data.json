{"componentChunkName":"component---src-templates-blog-post-js","path":"/url/","result":{"data":{"site":{"siteMetadata":{"title":"아자아자 나현이 화이팅"}},"markdownRemark":{"id":"857e1d0e-5b9a-5582-a5be-d81a0a0e188f","excerpt":"사용자가 브라우저 주소창에 URL을 입력하면 어떤 일이 일어날까?\n그 전에 URL과 URL 구조에 대해 알아보자. URL URL은 간단하게 말해 리소스가 저장되어 있는 위치를 지정하는 주소를 말한다.\n주로 와 를 많이 보게 되지만 그 외에도 , ,  등 다양하다.\n이것의 이름을 URL…","html":"<p>사용자가 브라우저 주소창에 URL을 입력하면 어떤 일이 일어날까?<br/>\n그 전에 <strong>URL</strong>과 <strong>URL 구조</strong>에 대해 알아보자.</p>\n<h3>URL</h3>\n<p>URL은 간단하게 말해 리소스가 저장되어 있는 위치를 지정하는 주소를 말한다.<br/>\n주로 <code class=\"language-text\">http:</code>와 <code class=\"language-text\">https:</code>를 많이 보게 되지만 그 외에도 <code class=\"language-text\">ftp:</code>, <code class=\"language-text\">file:</code>, <code class=\"language-text\">mailto:</code> 등 다양하다.<br/>\n이것의 이름을 <strong>URL 스킴(URL Scheme)</strong> 이라고 하는데 리소스에 접근하는 방식을 정의한 것이다. <br/></p>\n<ul>\n<li>웹이라면 <code class=\"language-text\">http:</code></li>\n<li>FTP 서버라면 <code class=\"language-text\">ftp:</code></li>\n<li>파일 시스템이라면 <code class=\"language-text\">file:</code></li>\n<li>이메일이라면 <code class=\"language-text\">mailto:</code></li>\n</ul>\n<br/>\nURL을 작성하는 방법은 URL 스킴에 따라 다르다.<br/>\n도메인 명/파일 경로/메일 주소 등이 들어갈 수도 있고, 때에 따라 사용자명, 비밀번호, 포트번호 등도 사용한다.<br/>\neg) `https://www.example.com:8080/path/to/resource`, <br/> `ftp://username:password@ftp.example.com/public/file.txt`\n<p><br/>그 다음 <strong>브라우저</strong>는 입력된 URL을 <strong>해독</strong>한다.</p>\n<p>해독하는 과정의 첫번째는 바로 URL 파싱이다.<br/>\nURL은 다음과 같은 요소로 분해된다.<br/></p>\n<p>➀ <strong>URL 스킴</strong>: <code class=\"language-text\">http:</code><br/>\n➁ <strong>호스트명</strong>: <code class=\"language-text\">www.example.com</code><br/>\n➂ <strong>포트번호</strong>: <code class=\"language-text\">8080</code> (지정된 경우만)<br/>\n➃ <strong>경로</strong>: <code class=\"language-text\">/dir/index.html</code><br/>\n➄ <strong>쿼리문자열</strong>: <code class=\"language-text\">tab=repositories</code> (선택 사항)<br/></p>\n<p><code class=\"language-text\">http://www.example.com/dir/index.html</code> 의 경우는 dir 디렉터리에 있는 index.html을 엑세스한다는 의미이다.<br/>\n하지만, 모든 URL 구조가 정확한 파일 경로를 가지고 있는 건 아니다.<br/><br/>\n아래 다섯가지 예시를 보자.</p>\n<h5>➀ <a href=\"http://www.example.com/dir/index.html\">www.example.com/dir/index.html</a></h5>\n<ul>\n<li><strong><a href=\"http://www.example.com\">www.example.com</a></strong> 서버에 있는 <strong>/dir</strong> 디렉터리 내 <strong>index.html</strong> 파일을 요청<br/></li>\n</ul>\n<h5>➁ <a href=\"http://www.example.com/dir/\">www.example.com/dir/</a></h5>\n<ul>\n<li><strong><a href=\"http://www.example.com\">www.example.com</a></strong> 서버에 있는 <strong>/dir</strong> 디렉터리를 요청</li>\n<li>디렉터리 내 기본 파일 (서버에서 설정한 파일, 보통 index.html)을 반환</li>\n<li>기본 파일이 없는 경우 디렉터리 목록을 반환<br/></li>\n</ul>\n<h5>➂ <a href=\"http://www.example.com/\">www.example.com/</a></h5>\n<ul>\n<li><strong><a href=\"http://www.example.com\">www.example.com</a></strong> 서버에 있는 루트 디렉터리를 요청</li>\n<li>루트 디렉터리 내 기본 파일 (index.html, index.php 등)</li>\n</ul>\n<h5>➃ <a href=\"http://www.example.com\">www.example.com</a></h5>\n<ul>\n<li>➂과 같이 루트 디렉터리 요청</li>\n<li>'/'(슬래시)가 생략되었지만 브라우저와 서버에서 보완함</li>\n</ul>\n<h5>➄ <a href=\"http://www.example.com/whatisthis\">www.example.com/whatisthis</a></h5>\n<ul>\n<li><strong><a href=\"http://www.example.com\">www.example.com</a></strong> 서버에 있는 whatisthis라는 리소스 요청</li>\n<li>파일일수도 디렉터리일수도 있음</li>\n<li>whatisthis라는 파일이 존재 시 파일 반환, 디렉터리가 있으면 디렉터리 반환(둘 다 존재할 수는 없다.)</li>\n<li>둘 다 존재하지 않는다면 404 반환</li>\n</ul>\n<p>URL을 해독한 후 브라우저는 HTTP를 사용하여 웹 서버에 엑세스 한다.</p>","frontmatter":{"title":"URL과 URL 구조","date":"July 07, 2024","description":"사용자는 브라우저 주소창에 URL을 입력한다."}},"previous":{"fields":{"slug":"/start-tech-blog-with-gatsby/"},"frontmatter":{"title":"Gatsby로 개발 블로그 시작!"}},"next":{"fields":{"slug":"/http/"},"frontmatter":{"title":"HTTP 요청과 응답"}}},"pageContext":{"id":"857e1d0e-5b9a-5582-a5be-d81a0a0e188f","previousPostId":"ae4fb1db-8415-5b3d-905b-0aa697b7aa0e","nextPostId":"2cad7ba4-1767-53f9-b209-47714d61feb5"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}