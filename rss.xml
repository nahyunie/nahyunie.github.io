<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 08 Jul 2024 14:23:47 GMT</lastBuildDate><item><title><![CDATA[DNS(Domain Name System)]]></title><link>https://gatsbystarterblogsource.gatsbyjs.io/dns-server/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/dns-server/</guid><pubDate>Sat, 06 Jul 2024 19:00:00 GMT</pubDate><content:encoded></content:encoded></item><item><title><![CDATA[IP 주소]]></title><description><![CDATA[브라우저는 URL을 해독하여 HTTP 메세지를 만든다. 
하지만 네트워크에 메세지를 보내는 기능이 없기 때문에 이 요청을 운영체제에 의뢰한다.
운영체제의 네트워크 API는 도메인이 아닌 IP 주소를 사용하여 통신한다.  그럼 IP…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/ip-address/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/ip-address/</guid><pubDate>Sat, 06 Jul 2024 18:00:00 GMT</pubDate><content:encoded>&lt;p&gt;브라우저는 URL을 해독하여 HTTP 메세지를 만든다. &lt;br/&gt;
하지만 네트워크에 메세지를 보내는 기능이 없기 때문에 이 요청을 운영체제에 의뢰한다.&lt;br/&gt;
운영체제의 네트워크 API는 도메인이 아닌 &lt;strong&gt;IP 주소&lt;/strong&gt;를 사용하여 통신한다. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;그럼 &lt;strong&gt;IP 주소&lt;/strong&gt;는 무엇이고 어떻게 구성될까?&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;IP 주소는 &lt;strong&gt;네트워크 번호&lt;/strong&gt;와 &lt;strong&gt;호스트 번호&lt;/strong&gt;의 조합으로 이루어져있다.&lt;/p&gt;
&lt;h5&gt;네트워크 번호&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;서브넷의 주소
&lt;ul&gt;
&lt;li&gt;서브넷 : 동일한 네트워크 주소를 공유하는 기기들의 그룹. 허브 or 스위치에 연결되어 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;호스트 번호&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;동일한 서브넷 내에서 개별 기기를 식별하는 부분&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;서브넷은 &lt;strong&gt;라우터&lt;/strong&gt;에 연결되어있다.&lt;br/&gt;
여러 서브넷이 라우터에 연결되어 전체 네트워크를 구성한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IP 주소는 32비트로 구성되어 있고 8비트씩 점(.)으로 구분한다.&lt;br/&gt;
IP 주소는 네트워크 번호와 호스트 번호가 합쳐서 32비트여야 한다는 규칙만 존재하므로 IP 주소만 보면 어디가 네트워크 번호와 호스트 번호인지 구분할 수 없다.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;따라서 &lt;strong&gt;&quot;서브넷 마스크&quot;&lt;/strong&gt; 를 사용하여 구분한다.&lt;/p&gt;
&lt;p&gt;서브넷 마스크는 다음 두 가지 방법으로 표기할 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;/255.255.255.0
&lt;ul&gt;
&lt;li&gt;eg) 10.11.12.13/255.255.255.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/24
&lt;ul&gt;
&lt;li&gt;eg) 10.11.12.13/24&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 두 표기 다 &lt;code class=&quot;language-text&quot;&gt;11111111.11111111.11111111.00000000&lt;/code&gt;와 같은 의미이다.&lt;br/&gt;
서브넷 마스크가 1인 부분은 네트워크 번호, 0인 부분은 호스트 번호.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;10.11.12.**0**/24&lt;/code&gt;와 같이 호스트 번호의 비트값이 전부 0이면 서브넷 그 자체를 의미하고, &lt;br/&gt;
&lt;code class=&quot;language-text&quot;&gt;10.11.12.**255**/24&lt;/code&gt;와 같이 전부 1이면 서브넷에 연결된 모든 기기에 패킷을 보내는 브로드캐스트를 의미한다. &lt;br/&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[HTTP 요청과 응답]]></title><description><![CDATA[브라우저는 입력받은 URL을 해독한 후 HTTP를 사용하여 웹 서버에 엑세스 한다.
그런데, HTTP가 뭐지? HTTP…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/http/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/http/</guid><pubDate>Sat, 06 Jul 2024 17:00:00 GMT</pubDate><content:encoded>&lt;p&gt;브라우저는 입력받은 URL을 해독한 후 HTTP를 사용하여 웹 서버에 엑세스 한다.&lt;br/&gt;
그런데, &lt;strong&gt;HTTP&lt;/strong&gt;가 뭐지?&lt;/p&gt;
&lt;h3&gt;HTTP&lt;/h3&gt;
&lt;p&gt;클라이언트(웹 브라우저)와 서버(웹 서버) 간의 데이터를 주고받기 위한 프로토콜.&lt;br/&gt;
인터넷 상에서 웹 페이지를 전달하는 가장 기본적인 통신규약&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;클라이언트는 HTTP 요청을 보내고 서버는 HTTP 응답을 반환한다.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;HTTP 요청(HTTP Request)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;요청 줄(Request Line): &lt;strong&gt;메서드&lt;/strong&gt;, URL, HTTP 버전 포함&lt;/li&gt;
&lt;li&gt;헤더(Header)&lt;/li&gt;
&lt;li&gt;바디(Body): 선택 사항&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;주요 메서드&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;DELETE&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;HTTP 응답(HTTP Response)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;상태 줄(Status Line): HTTP 버전, &lt;strong&gt;상태 코드(Status Code)&lt;/strong&gt;, 상태 메세지&lt;/li&gt;
&lt;li&gt;헤더(Header)&lt;/li&gt;
&lt;li&gt;바디(Body)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;주요 상태 코드&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;200 OK: 요청이 성공적으로 처리되었음&lt;/li&gt;
&lt;li&gt;400 Bad Request: 잘못된 요청임&lt;/li&gt;
&lt;li&gt;401 Unauthorized: 인증이 필요함&lt;/li&gt;
&lt;li&gt;404 Not Found: 요청한 리소스를 찾을 수 없음&lt;/li&gt;
&lt;li&gt;500 Internal Server Error: 서버 오류가 발생했음&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;주요 헤더 필드&lt;/h4&gt;
&lt;h5&gt;제너럴 헤더&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Date: 작성된 날짜&lt;/li&gt;
&lt;li&gt;Connection: 연결 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;리퀘스트 헤더&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Accept: 클라이언트가 수신할 수 있는 콘텐츠 타입&lt;/li&gt;
&lt;li&gt;User-Agent: 요청을 보내는 클라이언트(브라우저)의 정보&lt;/li&gt;
&lt;li&gt;Host: 요청하는 서버의 호스트 이름&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;응답 헤더&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Server: 서버의 소프트웨어와 버전 정보를 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;엔티티 헤더&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Content-Type: 응답 본문의 데이터 타입&lt;/li&gt;
&lt;li&gt;Content-Length: 응답 본문의 길이를 바이트 단위로 나타냄&lt;/li&gt;
&lt;li&gt;Expires: 캐시된 응답의 만료 날짜와 시간을 나타냄&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Content-Type: text/html&lt;/strong&gt; 일 때&lt;/p&gt;
&lt;p&gt;HTML 문서 안에 포함된 이미지나 영상 등의 리소스들은 필요에 따라 추가적인 HTTP 요청을 통해 받아오게 된다.&lt;br/&gt;
이미지나 다른 리소스가 별도의 URL로 제공되고 있을 경우, 클라이언트는 해당 리소스에 대해 별도의 HTTP 요청을 보낸다.&lt;br/&gt;
예를 들어, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;img src=&quot;image.jpg&quot;&gt;&lt;/code&gt;와 같은 경우 이미지 파일 &apos;image.jpg&apos;를 따로 요청하여 받아옴.&lt;br/&gt;
만약, 문서 안에 세 개의 리소스가 포함되어 있다면 HTTP 요청을 총 4번 보내게 되는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[URL과 URL 구조]]></title><description><![CDATA[사용자가 브라우저 주소창에 URL을 입력하면 어떤 일이 일어날까?
그 전에 URL과 URL 구조에 대해 알아보자. URL URL…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/url/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/url/</guid><pubDate>Sat, 06 Jul 2024 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;사용자가 브라우저 주소창에 URL을 입력하면 어떤 일이 일어날까?&lt;br/&gt;
그 전에 &lt;strong&gt;URL&lt;/strong&gt;과 &lt;strong&gt;URL 구조&lt;/strong&gt;에 대해 알아보자.&lt;/p&gt;
&lt;h3&gt;URL&lt;/h3&gt;
&lt;p&gt;URL은 간단하게 말해 리소스가 저장되어 있는 위치를 지정하는 주소를 말한다.&lt;br/&gt;
주로 &lt;code class=&quot;language-text&quot;&gt;http:&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;https:&lt;/code&gt;를 많이 보게 되지만 그 외에도 &lt;code class=&quot;language-text&quot;&gt;ftp:&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;file:&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;mailto:&lt;/code&gt; 등 다양하다.&lt;br/&gt;
이것의 이름을 &lt;strong&gt;URL 스킴(URL Scheme)&lt;/strong&gt; 이라고 하는데 리소스에 접근하는 방식을 정의한 것이다. &lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;웹이라면 &lt;code class=&quot;language-text&quot;&gt;http:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;FTP 서버라면 &lt;code class=&quot;language-text&quot;&gt;ftp:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;파일 시스템이라면 &lt;code class=&quot;language-text&quot;&gt;file:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이메일이라면 &lt;code class=&quot;language-text&quot;&gt;mailto:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
URL을 작성하는 방법은 URL 스킴에 따라 다르다.&lt;br/&gt;
도메인 명/파일 경로/메일 주소 등이 들어갈 수도 있고, 때에 따라 사용자명, 비밀번호, 포트번호 등도 사용한다.&lt;br/&gt;
eg) `https://www.example.com:8080/path/to/resource`, &lt;br/&gt; `ftp://username:password@ftp.example.com/public/file.txt`
&lt;p&gt;&lt;br/&gt;그 다음 &lt;strong&gt;브라우저&lt;/strong&gt;는 입력된 URL을 &lt;strong&gt;해독&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;해독하는 과정의 첫번째는 바로 URL 파싱이다.&lt;br/&gt;
URL은 다음과 같은 요소로 분해된다.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;➀ &lt;strong&gt;URL 스킴&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;http:&lt;/code&gt;&lt;br/&gt;
➁ &lt;strong&gt;호스트명&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;www.example.com&lt;/code&gt;&lt;br/&gt;
➂ &lt;strong&gt;포트번호&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;8080&lt;/code&gt; (지정된 경우만)&lt;br/&gt;
➃ &lt;strong&gt;경로&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;/dir/index.html&lt;/code&gt;&lt;br/&gt;
➄ &lt;strong&gt;쿼리문자열&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;tab=repositories&lt;/code&gt; (선택 사항)&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;http://www.example.com/dir/index.html&lt;/code&gt; 의 경우는 dir 디렉터리에 있는 index.html을 엑세스한다는 의미이다.&lt;br/&gt;
하지만, 모든 URL 구조가 정확한 파일 경로를 가지고 있는 건 아니다.&lt;br/&gt;&lt;br/&gt;
아래 다섯가지 예시를 보자.&lt;/p&gt;
&lt;h5&gt;➀ &lt;a href=&quot;http://www.example.com/dir/index.html&quot;&gt;www.example.com/dir/index.html&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.example.com&quot;&gt;www.example.com&lt;/a&gt;&lt;/strong&gt; 서버에 있는 &lt;strong&gt;/dir&lt;/strong&gt; 디렉터리 내 &lt;strong&gt;index.html&lt;/strong&gt; 파일을 요청&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;➁ &lt;a href=&quot;http://www.example.com/dir/&quot;&gt;www.example.com/dir/&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.example.com&quot;&gt;www.example.com&lt;/a&gt;&lt;/strong&gt; 서버에 있는 &lt;strong&gt;/dir&lt;/strong&gt; 디렉터리를 요청&lt;/li&gt;
&lt;li&gt;디렉터리 내 기본 파일 (서버에서 설정한 파일, 보통 index.html)을 반환&lt;/li&gt;
&lt;li&gt;기본 파일이 없는 경우 디렉터리 목록을 반환&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;➂ &lt;a href=&quot;http://www.example.com/&quot;&gt;www.example.com/&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.example.com&quot;&gt;www.example.com&lt;/a&gt;&lt;/strong&gt; 서버에 있는 루트 디렉터리를 요청&lt;/li&gt;
&lt;li&gt;루트 디렉터리 내 기본 파일 (index.html, index.php 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;➃ &lt;a href=&quot;http://www.example.com&quot;&gt;www.example.com&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;➂과 같이 루트 디렉터리 요청&lt;/li&gt;
&lt;li&gt;&apos;/&apos;(슬래시)가 생략되었지만 브라우저와 서버에서 보완함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;➄ &lt;a href=&quot;http://www.example.com/whatisthis&quot;&gt;www.example.com/whatisthis&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.example.com&quot;&gt;www.example.com&lt;/a&gt;&lt;/strong&gt; 서버에 있는 whatisthis라는 리소스 요청&lt;/li&gt;
&lt;li&gt;파일일수도 디렉터리일수도 있음&lt;/li&gt;
&lt;li&gt;whatisthis라는 파일이 존재 시 파일 반환, 디렉터리가 있으면 디렉터리 반환(둘 다 존재할 수는 없다.)&lt;/li&gt;
&lt;li&gt;둘 다 존재하지 않는다면 404 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;URL을 해독한 후 브라우저는 HTTP를 사용하여 웹 서버에 엑세스 한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Gatsby로 개발 블로그 시작!]]></title><description><![CDATA[👷‍♀️ 새 단장 중! 불편을 드려 죄송합니다.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/start-tech-blog-with-gatsby/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/start-tech-blog-with-gatsby/</guid><pubDate>Thu, 04 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;👷‍♀️ 새 단장 중! 불편을 드려 죄송합니다.&lt;/h3&gt;</content:encoded></item></channel></rss>